apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.google.firebase.crashlytics'

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.example.deliveryapp"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        vectorDrawables.generatedDensities = []
        multiDexEnabled true
        testInstrumentationRunner "com.example.deliveryapp.AndroidTestRunner"

        def secureProps = new Properties()
        if (file("../secure.properties").exists()) {
            file("../secure.properties")?.withInputStream { secureProps.load(it) }
        }
        resValue "string", "maps_api_key", (secureProps.getProperty("MAPS_API_KEY") ?: "")

        javaCompileOptions {
            annotationProcessorOptions {
                arguments["room.incremental"]= "true"
            }
        }
    }
    aaptOptions {
        additionalParameters "--no-version-vectors"
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions{
        jvmTarget = "1.8"
    }

    buildFeatures {

        dataBinding true
        //viewBinding true
    }

    testOptions {

        animationsDisabled true

        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }


}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "androidx.appcompat:appcompat:$androidx_version"
    implementation "androidx.core:core-ktx:$androidx_core_version"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    implementation "androidx.recyclerview:recyclerview:$androidx_recycler_view_version"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraint_layout_version"
    implementation "androidx.cardview:cardview:$androidx_cardview_version"
    implementation 'androidx.fragment:fragment-ktx:1.2.5'
    // Import the BoM for the Firebase platform
    implementation platform('com.google.firebase:firebase-bom:26.1.0')

    //google dependency
    implementation "com.google.android.material:material:$google_material_version"
    implementation "androidx.annotation:annotation:$androidx_version"
    implementation "com.google.android.gms:play-services-maps:$play_services_map_version"

    //Firebase
    implementation "com.google.firebase:firebase-core"
    implementation "com.google.firebase:firebase-auth"

    // Gson library
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "com.squareup.retrofit2:converter-gson:$gson_converter_version"

    // Glide for image loading
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    kapt "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.room:room-runtime:$architecture_components_room_version"
    kapt "androidx.room:room-compiler:$architecture_components_room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$architecture_components_room_version"
    implementation "androidx.paging:paging-runtime:$paging_version"

    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common:$paging_version"

    // Time library
    implementation "com.jakewharton.threetenabp:threetenabp:$time_library_version"

    // Dagger dependencies
    implementation "com.google.dagger:dagger-android:$dagger_version"
    api "com.google.dagger:dagger-android-support:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$rxjava_android_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    // Timber for logging
    implementation "com.jakewharton.timber:timber:$timber_version"


    // (Recommended) Add Analytics
    implementation "com.google.firebase:firebase-analytics"

    //maps dependencies
    implementation "com.google.android.gms:play-services-maps:$play_services_map_version"
    implementation "com.google.android.gms:play-services-location:17.1.0"
    implementation "com.google.maps.android:android-maps-utils:$map_utils_version"
    implementation "com.google.maps:google-maps-services:$maps_services_version"
    implementation("com.google.android.libraries.places:places-compat:$places_version")
    implementation("com.schibstedspain.android:leku:$leku_version") {
        exclude group: 'com.google.android.gms'
        exclude module: "play-services-places"
    }

    implementation "androidx.core:core-ktx:$ktx_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Dependencies for LeakCanary (Memory Leak detection library)
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary_version"
    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary_version"

    //Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"

    implementation "androidx.multidex:multidex:$multidex_version"

    implementation "com.ramotion.paperonboarding:paper-onboarding:$paper_onboarding_version"

    implementation "com.google.firebase:firebase-firestore"

    implementation "com.facebook.shimmer:shimmer:$shimmer_version"

    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_idling_resource_version"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    implementation 'androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02'
    kapt 'androidx.hilt:hilt-compiler:1.0.0-alpha02'
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"



    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When using the BoM, you don't specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics'


    //Unit Test Dependencies
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    testImplementation "androidx.room:room-testing:$room_version"
    testImplementation "android.arch.core:core-testing:$core_testing_version"
    testImplementation "androidx.paging:paging-common:$paging_version"
    testImplementation "org.mockito:mockito-inline:$mockito_inline_verion"
    testImplementation "org.powermock:powermock-module-junit4:$power_mock_version"
    testImplementation "org.powermock:powermock-api-mockito2:$power_mock_version"
    testImplementation "io.mockk:mockk:$mockk_version"

    //Android Test Dependencies
    androidTestImplementation "junit:junit:$junit_version"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:$mockito_kotlin_version"
    androidTestImplementation "org.mockito:mockito-android:$mockito_version"
    androidTestImplementation "androidx.test:runner:$runner_version"
    androidTestImplementation "com.android.support.test:rules:$rules_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "androidx.test.ext:junit:$junit_ext_version"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espresso_androidx_test_version"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espresso_androidx_test_version"
    androidTestImplementation "io.mockk:mockk-android:$mockk_version"
    androidTestImplementation "android.arch.core:core-testing:$core_testing_version"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"
    androidTestImplementation "android.arch.core:core-testing:$core_testing_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    kaptAndroidTest "com.google.dagger:hilt-android-compiler:$hilt_version"

}
